#!/usr/bin/python3
# -*- coding:utf8 -*-

import numpy as np
import xgboost as xgb
import os

def train():
    ## load data in do training
    # dtrain = xgb.DMatrix('/home/luolaihu/Downloads/train/cfeature')
    # param = {'max_depth':5, 'eta':0.5, 'silent':1, 'objective':'reg:linear'}
    # num_round = 20
    # print ('running cross validation')
    # # do cross validation, this will print result out as
    # # [iteration]  metric_name:mean_value+std_value
    # # std_value is standard deviation of the metric
    # xgb.cv(param, dtrain, num_round, nfold=2,
    #        metrics={'rmse'}, seed = 0,
    #        callbacks=[xgb.callback.print_evaluation(show_stdv=True)])

    modelPath = '/home/luolaihu/Downloads/model/0001.model'
    ## simple example
    # load file from text file, also binary buffer generated by xgboost
    dtrain = xgb.DMatrix('/home/luolaihu/Downloads/train/cfeature')
    deval = xgb.DMatrix('/home/luolaihu/Downloads/test/efeature')
    # specify parameters via map, definition are same as c++ version
    param = {'max_depth':5, 'eta':0.2, 'silent':1, 'objective':'reg:linear', 'min_child_weight':1}
    # specify validations set to watch performance
    watchlist = [(deval, 'eval'), (dtrain, 'train')]
    num_round = 30
    bst = xgb.train(param, dtrain, num_round, watchlist)

    if os.path.exists(modelPath):
        os.remove(modelPath)
    bst.save_model(modelPath)
    # dump model
    dumpPath = '/home/luolaihu/Downloads/model/dump.raw.txt'
    if os.path.exists(dumpPath):
        os.remove(dumpPath)
    bst.dump_model(dumpPath)

    bst = xgb.Booster({'nthread': 4}, model_file=modelPath)
    deval = xgb.DMatrix('/home/luolaihu/Downloads/test/efeature')
    predEvals = bst.predict(deval)
    labels = deval.get_label()
    for i in range(1, len(predEvals)):
        print('%s:%s' % (labels[i], predEvals[i]))

    # bst = xgb.Booster({'nthread': 4}, model_file=modelPath)
    # dtest = xgb.DMatrix('/home/luolaihu/Downloads/test/tfeature')
    # indexMap = dict()
    # i = 0
    # with open('/home/luolaihu/Downloads/test/labelMap', 'r') as f:
    #     for line in f:
    #         indexMap[i] = line.strip()
    #         i = i + 1
    # preds = bst.predict(dtest)
    #
    # resultPath = '/home/luolaihu/Downloads/test/result.csv'
    # if os.path.exists(resultPath):
    #     os.remove(resultPath)
    # with open(resultPath, 'a') as out:
    #     for i in range(len(preds)):
    #         out.write('%s%s' % (indexMap[i].replace('#', ','), preds[i]) + '\r\n')

if __name__ == '__main__':
    train()